" Init config ----------------------------------------------------------------
set clipboard=unnamed
set shellcmdflag=-ic " Enable bash aliases.

" UI config ------------------------------------------------------------------
set colorcolumn=80
set nohlsearch " Don't keep searched terms highlighted.
set laststatus=2 " Always show a status line.
set noshowmode " Hide the INSERT line since we're using a custom status line.
set nowrap " Do not wrap long lines.
set tabstop=2 softtabstop=0 expandtab shiftwidth=2

" Line numbers.
set number " Show line numbers.
set relativenumber " Show relative line numbers.

" Panes.
set splitbelow " Split the new pane below the current one.
set splitright " Split the new pane to the right of the current one.

" Whitespace.
set list " Show whitespace.
set listchars=tab:>¬,extends:>,precedes:<,space:·, " Characters.

autocmd BufLeave,FocusLost * silent! wall " Save file on focus lost.

" Mouse mode
set mouse=a " Turn on mouse mode.
" Mouse scrolls by 1 line at a time.
noremap <ScrollWheelUp> 1<C-Y>
noremap <ScrollWheelDown> 1<C-E>
inoremap <ScrollWheelUp> <C-O>1<C-Y>
inoremap <ScrollWheelDown> <C-O>1<C-E>

" Promote best practices.
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Snippets -------------------------------------------------------------------
iabbrev bp require 'pry'; binding.pry

" Functions ------------------------------------------------------------------
fun CopyFilenameToClipboard()
  let @+ = expand("%")
endfun

" Remove extra whitespace on save --------------------------------------------
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" NERDTree -------------------------------------------------------------------
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") && v:this_session == "" | NERDTree | endif
map <C-\> :NERDTreeToggle<CR>

" Prettier -------------------------------------------------------------------
let g:prettier#config#single_quote = 'false'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#arrow_parens = 'avoid'
let g:prettier#config#trailing_comma = 'none'
let g:prettier#config#parser = 'babylon'

" fzf ------------------------------------------------------------------------
set rtp+=~/.fzf
nnoremap <C-p> :FZF<CR>

" Colorscheme ----------------------------------------------------------------
" Lightline
let g:lightline = { 'colorscheme': 'one' }

packadd! color-one-dark
syntax on
colorscheme onedark

" Change vim bracket highlighting colors
hi MatchParen cterm=bold ctermbg=none ctermfg=magenta

" Base config overrides ------------------------------------------------------
if filereadable($HOME . "/.vim/vimrc.local")
  source ~/.vim/vimrc.local
endif
